Event Description 1: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.



Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  0.5]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666
Similarity of rules: 
0.33333333333333337

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  0.5]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666
Similarity of rules: 
0.33333333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4270833333333333
Similarity of rules: 
0.5729166666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.3958333333333333
Similarity of rules: 
0.6041666666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4270833333333333
Similarity of rules: 
0.5729166666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.34375
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5729166666666666
Similarity of rules: 
0.42708333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.      1.      1.     ]
 [0.28125 1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 0 2]
Sum of distances for optimal body condition assignment: 
2.28125
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.6640625
Similarity of rules: 
0.3359375

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25   1.    ]
 [1.     0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.14583333333333331
Similarity of rules: 
0.8541666666666667

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5    1.     1.    ]
 [1.     0.3125 1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.8125
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.546875
Similarity of rules: 
0.453125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.34375
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5729166666666666
Similarity of rules: 
0.42708333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.84375
Similarity of rules: 
0.15625

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5     1.     ]
 [1.      0.15625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.65625
Distance between rule bodies: 
0.328125
Distance between rules: 
0.5520833333333333
Similarity of rules: 
0.44791666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5     1.     ]
 [1.      0.15625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.65625
Distance between rule bodies: 
0.328125
Distance between rules: 
0.5520833333333333
Similarity of rules: 
0.44791666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1. ]
 [0.5 1. ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875
Similarity of rules: 
0.3125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25     1.      ]
 [1.       0.015625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.1328125
Distance between rules: 
0.109375
Similarity of rules: 
0.890625

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.      1.      1.     ]
 [0.28125 1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 0 2]
Sum of distances for optimal body condition assignment: 
2.28125
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.6640625
Similarity of rules: 
0.3359375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25   1.    ]
 [1.     0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.14583333333333331
Similarity of rules: 
0.8541666666666667

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5    1.     1.    ]
 [1.     0.3125 1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.8125
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.546875
Similarity of rules: 
0.453125

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25      1.       ]
 [1.        0.0078125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.2578125
Distance between rule bodies: 
0.12890625
Distance between rules: 
0.10677083333333333
Similarity of rules: 
0.8932291666666666

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.84375
Similarity of rules: 
0.15625

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5     1.     ]
 [1.      0.15625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.65625
Distance between rule bodies: 
0.328125
Distance between rules: 
0.5520833333333333
Similarity of rules: 
0.44791666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5     1.     ]
 [1.      0.15625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.65625
Distance between rule bodies: 
0.328125
Distance between rules: 
0.5520833333333333
Similarity of rules: 
0.44791666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1. ]
 [0.5 1. ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875
Similarity of rules: 
0.3125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875
Similarity of rules: 
0.3125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25    1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.03125 1.      1.     ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.28125
Distance between rule bodies: 
0.5703125
Distance between rules: 
0.48125
Similarity of rules: 
0.51875

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[1.       1.       1.       1.      ]
 [1.       1.       1.       1.      ]
 [1.       1.       1.       1.      ]
 [0.265625 1.       1.       1.      ]]
Optimal Body Condition Assignment: 
[3 1 2 0]
Sum of distances for optimal body condition assignment: 
3.265625
Distance between rule bodies: 
0.81640625
Distance between rules: 
0.7093750000000001
Similarity of rules: 
0.2906249999999999

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.0625  1.      1.     ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.15625
Distance between rule bodies: 
0.5390625
Distance between rules: 
0.44375000000000003
Similarity of rules: 
0.5562499999999999

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.5     1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
2.84375
Distance between rule bodies: 
0.7109375
Distance between rules: 
0.76875
Similarity of rules: 
0.23124999999999996

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     0.3125 1.     1.    ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.625
Distance between rule bodies: 
0.65625
Distance between rules: 
0.5875
Similarity of rules: 
0.4125

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     0.5    1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
2.8125
Distance between rule bodies: 
0.703125
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[2 1 0 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.5703125
Similarity of rules: 
0.4296875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8203125
Similarity of rules: 
0.1796875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.6640625
Similarity of rules: 
0.3359375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.140625
Similarity of rules: 
0.859375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7604166666666666
Similarity of rules: 
0.23958333333333337

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.25
Distance between rule bodies: 
0.85
Distance between rules: 
0.7291666666666666
Similarity of rules: 
0.27083333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8125
Similarity of rules: 
0.1875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8125
Similarity of rules: 
0.1875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8958333333333333
Similarity of rules: 
0.10416666666666674

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.34375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.34375
Distance between rule bodies: 
0.86875
Distance between rules: 
0.7864583333333333
Similarity of rules: 
0.21354166666666674

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.34375
Distance between rule bodies: 
0.86875
Distance between rules: 
0.890625
Similarity of rules: 
0.109375

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.8625
Distance between rules: 
0.78125
Similarity of rules: 
0.21875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.8625
Distance between rules: 
0.8854166666666666
Similarity of rules: 
0.11458333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.74375
Similarity of rules: 
0.25625

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7375
Similarity of rules: 
0.26249999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.74375
Similarity of rules: 
0.25625

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7375
Similarity of rules: 
0.26249999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  0.5 1. ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.84375
Similarity of rules: 
0.15625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      0.5     1.     ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.84375
Distance between rule bodies: 
0.6145833333333334
Distance between rules: 
0.5546875
Similarity of rules: 
0.4453125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     0.5    1.    ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
1.8125
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.546875
Similarity of rules: 
0.453125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.  1.  1. ]
 [1.  1.  1. ]
 [0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875
Similarity of rules: 
0.3125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.375 1.    1.   ]
 [0.375 0.375 1.    1.   ]
 [0.375 0.375 1.    1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6125
Similarity of rules: 
0.38749999999999996

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.375 1.    0.375 1.    1.    1.   ]
 [0.375 0.375 1.    0.125 1.    1.    1.   ]
 [0.375 0.375 1.    0.375 1.    1.    1.   ]
 [1.    1.    1.    1.    0.5   1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 3 1 4 2 5 6]
Sum of distances for optimal body condition assignment: 
4.375
Distance between rule bodies: 
0.625
Distance between rules: 
0.5859375
Similarity of rules: 
0.4140625

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.375 0.375 1.   ]
 [0.375 0.375 0.375 1.   ]
 [0.375 0.375 0.375 1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.53125
Distance between rules: 
0.48750000000000004
Similarity of rules: 
0.5125

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.375 1.    1.   ]
 [0.375 0.375 1.    1.   ]
 [0.375 0.375 1.    1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
2.75
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6125
Similarity of rules: 
0.38749999999999996

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.125 0.375 1.    1.   ]
 [0.375 0.375 0.125 1.    1.   ]
 [0.375 0.375 0.375 1.    1.   ]
 [1.    1.    1.    0.5   1.   ]
 [1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[1 2 0 3 4]
Sum of distances for optimal body condition assignment: 
2.125
Distance between rule bodies: 
0.425
Distance between rules: 
0.40625
Similarity of rules: 
0.59375

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.375 1.    1.    1.   ]
 [0.375 0.375 1.    1.    1.   ]
 [0.375 0.375 1.    1.    1.   ]
 [1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
3.75
Distance between rule bodies: 
0.75
Distance between rules: 
0.6770833333333333
Similarity of rules: 
0.32291666666666674

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.8303571428571428
Similarity of rules: 
0.1696428571428572

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25   1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     0.0625 1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 5 2 3 4 1]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.71875
Distance between rules: 
0.6339285714285714
Similarity of rules: 
0.3660714285714286

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.8392857142857142
Similarity of rules: 
0.1607142857142858

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     0.5    1.     1.     1.    ]
 [0.3125 1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[5 1 4 3 2 0]
Sum of distances for optimal body condition assignment: 
4.8125
Distance between rule bodies: 
0.8020833333333334
Distance between rules: 
0.7321428571428571
Similarity of rules: 
0.2678571428571429

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.125  1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     0.0625 1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 5 2 3 4 1]
Sum of distances for optimal body condition assignment: 
4.1875
Distance between rule bodies: 
0.6979166666666666
Distance between rules: 
0.6026785714285714
Similarity of rules: 
0.3973214285714286

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.375
Distance between rule bodies: 
0.8958333333333334
Distance between rules: 
0.9107142857142857
Similarity of rules: 
0.0892857142857143

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      0.3125  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 5 2 3 4 1]
Sum of distances for optimal body condition assignment: 
4.65625
Distance between rule bodies: 
0.7760416666666666
Distance between rules: 
0.7098214285714285
Similarity of rules: 
0.2901785714285715

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.34375
Distance between rule bodies: 
0.890625
Distance between rules: 
0.90625
Similarity of rules: 
0.09375

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.375
Distance between rule bodies: 
0.84375
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.25
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.7312500000000001
Similarity of rules: 
0.26874999999999993

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.25
Body atom distances: 
[[0.34375 1.     ]
 [1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.34375
Distance between rule bodies: 
0.671875
Distance between rules: 
0.53125
Similarity of rules: 
0.46875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.    ]
 [1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.3125
Distance between rule bodies: 
0.65625
Distance between rules: 
0.5416666666666666
Similarity of rules: 
0.45833333333333337

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125   0.375   1.      1.      1.      1.      1.     ]
 [0.375   0.03125 1.      1.      1.      1.      1.     ]
 [1.      1.      0.25    1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.40625
Distance between rule bodies: 
0.6294642857142857
Distance between rules: 
0.58984375
Similarity of rules: 
0.41015625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.         0.375      1.         0.3125     1.         1.
  1.        ]
 [0.375      0.         1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.         1.         1.         1.
  1.        ]
 [0.3125     0.375      1.         0.         1.         1.
  1.        ]
 [1.         1.         1.         1.         0.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.1666666666666667
Distance between rule bodies: 
0.16666666666666669
Distance between rules: 
0.14583333333333334
Similarity of rules: 
0.8541666666666666

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125  0.375  0.375  1.     1.     1.     1.    ]
 [0.3125 0.0625 0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     0.5    1.     1.     1.    ]
 [0.375  0.375  0.375  1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2 4 5 6]
Sum of distances for optimal body condition assignment: 
4.0625
Distance between rule bodies: 
0.5803571428571429
Distance between rules: 
0.546875
Similarity of rules: 
0.453125

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125  0.375  1.     1.     1.     1.     1.    ]
 [0.3125 0.0625 1.     1.     1.     1.     1.    ]
 [1.     1.     0.25   1.     1.     1.     1.    ]
 [0.375  0.375  1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
4.4375
Distance between rule bodies: 
0.6339285714285714
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125   0.34375 0.34375 1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.3125  1.      1.     ]
 [0.375   0.34375 0.09375 1.      1.      1.      1.     ]
 [1.      1.      1.      0.3125  1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3 5 6]
Sum of distances for optimal body condition assignment: 
3.15625
Distance between rule bodies: 
0.45089285714285715
Distance between rules: 
0.43359375
Similarity of rules: 
0.56640625

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125   0.375   1.      1.      1.      1.      1.     ]
 [0.28125 0.125   1.      1.      1.      1.      1.     ]
 [1.      1.      0.25    1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 6 5 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.5714285714285714
Distance between rules: 
0.5390625
Similarity of rules: 
0.4609375

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.7312500000000001
Similarity of rules: 
0.26874999999999993

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7250000000000001
Similarity of rules: 
0.2749999999999999

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8
Similarity of rules: 
0.19999999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.5     1.      1.     ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.84375
Distance between rule bodies: 
0.7109375
Distance between rules: 
0.6312500000000001
Similarity of rules: 
0.3687499999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     0.5    1.     1.    ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.8125
Distance between rule bodies: 
0.703125
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [0.5 1.  1.  1. ]]
Optimal Body Condition Assignment: 
[3 1 2 0]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[2 1 0 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125  0.3125 1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.375  0.0625 1.     1.     1.     1.     1.     1.     1.    ]
 [0.375  0.3125 1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     0.5    1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 4 6 3 1 5 2 7 8]
Sum of distances for optimal body condition assignment: 
6.6875
Distance between rule bodies: 
0.7430555555555556
Distance between rules: 
0.7000000000000001
Similarity of rules: 
0.29999999999999993

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125      0.3125     1.         0.375      1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [0.375      0.0625     1.         0.375      1.         1.
  1.         1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.         1.        ]]
Optimal Body Condition Assignment: 
[0 4 8 5 1 3 2 7 6]
Sum of distances for optimal body condition assignment: 
5.395833333333333
Distance between rule bodies: 
0.599537037037037
Distance between rules: 
0.5458333333333333
Similarity of rules: 
0.4541666666666667

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.03125 0.3125  0.3125  1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.0625  0.3125  1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.0625  1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      0.25    1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 4 5 6 1 2 3 7 8]
Sum of distances for optimal body condition assignment: 
5.40625
Distance between rule bodies: 
0.6006944444444444
Distance between rules: 
0.56875
Similarity of rules: 
0.43125

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.03125 0.3125  1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.0625  1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 4 6 3 1 5 2 7 8]
Sum of distances for optimal body condition assignment: 
6.59375
Distance between rule bodies: 
0.7326388888888888
Distance between rules: 
0.690625
Similarity of rules: 
0.30937499999999996

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.03125 0.3125  0.3125  1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 5 6 3 2 1 4 7 8]
Sum of distances for optimal body condition assignment: 
6.15625
Distance between rule bodies: 
0.6840277777777778
Distance between rules: 
0.6468750000000001
Similarity of rules: 
0.3531249999999999

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.375  1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.3125 0.125  1.     1.     1.     1.     1.     1.     1.    ]
 [0.3125 0.375  1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     0.5    1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.5    1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 8 6 3 1 5 2 7 4]
Sum of distances for optimal body condition assignment: 
6.1875
Distance between rule bodies: 
0.6875
Distance between rules: 
0.65
Similarity of rules: 
0.35

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
17.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157
Similarity of rules: 
0.026315789473684292

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
17.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157
Similarity of rules: 
0.026315789473684292

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
17.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157
Similarity of rules: 
0.026315789473684292

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 1  0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
17.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157
Similarity of rules: 
0.026315789473684292

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375   0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[11  3  9  0  4  5  6  7  8  2 10  1 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
16.15625
Distance between rule bodies: 
0.8975694444444444
Distance between rules: 
0.8667763157894737
Similarity of rules: 
0.13322368421052633

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.28125    0.375      1.         0.09375    1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.28125    0.375      1.         0.09375    1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]]
Optimal Body Condition Assignment: 
[11  7  9  5 17  3  0  4  8  2 10  1 12 13 14 15 16  6]
Sum of distances for optimal body condition assignment: 
13.802083333333334
Distance between rule bodies: 
0.7667824074074074
Distance between rules: 
0.7297149122807017
Similarity of rules: 
0.27028508771929827

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.28125    0.3125     0.0625     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.3125     0.28125    0.28125    1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.3125     0.28125    0.28125    1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         0.33333333 1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.3125     0.3125     0.3125     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.3125     0.3125     0.3125     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.3125     0.3125     0.3125     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.3125     0.3125     0.3125     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]]
Optimal Body Condition Assignment: 
[ 2  4  9  1  0  5  6  7  8  3 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
14.989583333333332
Distance between rule bodies: 
0.8327546296296295
Distance between rules: 
0.8053728070175438
Similarity of rules: 
0.19462719298245623

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.28125 0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[ 0  3  9  1  4  5  6  7  8  2 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
16.09375
Distance between rule bodies: 
0.8940972222222222
Distance between rules: 
0.8634868421052632
Similarity of rules: 
0.13651315789473684

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.28125 0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.0625  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.0625  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.34375 0.09375 1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.34375 0.09375 1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      0.25    1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      0.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[ 0  7  9  1  5  2  6  8  3  4 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
13.9375
Distance between rule bodies: 
0.7743055555555556
Distance between rules: 
0.7483552631578947
Similarity of rules: 
0.2516447368421053

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125  0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.      1.      1.      1.
  1.      1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[11  3  9  1 17  5  6  7  8  2 10  0 12 13 14 15 16  4]
Sum of distances for optimal body condition assignment: 
15.65625
Distance between rule bodies: 
0.8697916666666666
Distance between rules: 
0.8404605263157894
Similarity of rules: 
0.15953947368421062

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8020833333333333
Similarity of rules: 
0.19791666666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25    1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      0.03125 1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 4 2 3 1]
Sum of distances for optimal body condition assignment: 
3.28125
Distance between rule bodies: 
0.65625
Distance between rules: 
0.5677083333333333
Similarity of rules: 
0.43229166666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8125
Similarity of rules: 
0.1875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [0.28125 1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[4 1 2 3 0]
Sum of distances for optimal body condition assignment: 
4.28125
Distance between rule bodies: 
0.85625
Distance between rules: 
0.765625
Similarity of rules: 
0.234375

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      0.0625  1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 4 2 3 1]
Sum of distances for optimal body condition assignment: 
3.15625
Distance between rule bodies: 
0.63125
Distance between rules: 
0.5364583333333333
Similarity of rules: 
0.46354166666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.34375
Distance between rule bodies: 
0.86875
Distance between rules: 
0.890625
Similarity of rules: 
0.109375

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     0.3125 1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 4 2 3 1]
Sum of distances for optimal body condition assignment: 
3.625
Distance between rule bodies: 
0.725
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.8625
Distance between rules: 
0.8854166666666666
Similarity of rules: 
0.11458333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8
Similarity of rules: 
0.19999999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.5     1.      1.     ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.84375
Distance between rule bodies: 
0.7109375
Distance between rules: 
0.6312500000000001
Similarity of rules: 
0.3687499999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     0.5    1.     1.    ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.8125
Distance between rule bodies: 
0.703125
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [0.5 1.  1.  1. ]]
Optimal Body Condition Assignment: 
[3 1 2 0]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25    1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.28125
Distance between rule bodies: 
0.140625
Distance between rules: 
0.13541666666666666
Similarity of rules: 
0.8645833333333334

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.      1.      1.     ]
 [0.28125 1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 0 2]
Sum of distances for optimal body condition assignment: 
2.28125
Distance between rule bodies: 
0.7604166666666666
Distance between rules: 
0.6484375
Similarity of rules: 
0.3515625

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25   1.    ]
 [1.     0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.3125
Distance between rule bodies: 
0.15625
Distance between rules: 
0.125
Similarity of rules: 
0.875

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.5    1.     1.    ]
 [1.     0.3125 1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.8125
Distance between rule bodies: 
0.6041666666666666
Distance between rules: 
0.5234375
Similarity of rules: 
0.4765625

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.640625
Similarity of rules: 
0.359375

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.125  0.3125 1.     1.     1.    ]
 [0.375  0.0625 1.     1.     1.    ]
 [1.     1.     0.25   1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.4375
Distance between rule bodies: 
0.4875
Distance between rules: 
0.453125
Similarity of rules: 
0.546875

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.0625     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.25       1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[0 1 2 3 6 4 5]
Sum of distances for optimal body condition assignment: 
3.770833333333333
Distance between rule bodies: 
0.5386904761904762
Distance between rules: 
0.47916666666666663
Similarity of rules: 
0.5208333333333334

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.3125 0.3125 1.     1.    ]
 [0.3125 0.0625 0.3125 1.     1.    ]
 [1.     1.     1.     0.5    1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2 4]
Sum of distances for optimal body condition assignment: 
2.625
Distance between rule bodies: 
0.525
Distance between rules: 
0.4895833333333333
Similarity of rules: 
0.5104166666666667

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.3125 1.     1.     1.    ]
 [0.3125 0.0625 1.     1.     1.    ]
 [1.     1.     0.25   1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
2.375
Distance between rule bodies: 
0.475
Distance between rules: 
0.44791666666666663
Similarity of rules: 
0.5520833333333334

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 0.3125 1.     1.    ]
 [1.     1.     1.     1.     0.3125]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3]
Sum of distances for optimal body condition assignment: 
2.6875
Distance between rule bodies: 
0.5375
Distance between rules: 
0.5
Similarity of rules: 
0.5

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.375  1.     1.     1.    ]
 [0.3125 0.125  1.     1.     1.    ]
 [1.     1.     0.25   1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.5   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
1.9375
Distance between rule bodies: 
0.3875
Distance between rules: 
0.375
Similarity of rules: 
0.625

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.6640625
Similarity of rules: 
0.3359375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.6640625
Similarity of rules: 
0.3359375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.65625
Similarity of rules: 
0.34375

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.125  0.3125 1.     1.    ]
 [0.375  0.0625 1.     1.    ]
 [1.     1.     0.25   1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.4375
Distance between rule bodies: 
0.359375
Distance between rules: 
0.35000000000000003
Similarity of rules: 
0.6499999999999999

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.0625     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.25       1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[0 1 2 6 3 4 5]
Sum of distances for optimal body condition assignment: 
3.770833333333333
Distance between rule bodies: 
0.5386904761904762
Distance between rules: 
0.47916666666666663
Similarity of rules: 
0.5208333333333334

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.3125 0.3125 1.    ]
 [0.3125 0.0625 0.3125 1.    ]
 [1.     1.     1.     0.5   ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
1.625
Distance between rule bodies: 
0.40625
Distance between rules: 
0.3875
Similarity of rules: 
0.6125

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.3125 1.     1.    ]
 [0.3125 0.0625 1.     1.    ]
 [1.     1.     0.25   1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.34375
Distance between rules: 
0.3375
Similarity of rules: 
0.6625

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.3125 0.3125 1.     1.    ]
 [0.3125 0.3125 0.3125 1.     1.    ]
 [1.     1.     1.     1.     0.3125]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 4 2 3]
Sum of distances for optimal body condition assignment: 
2.6875
Distance between rule bodies: 
0.5375
Distance between rules: 
0.5
Similarity of rules: 
0.5

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.0625 0.375  1.     1.     1.    ]
 [0.3125 0.125  1.     1.     1.    ]
 [1.     1.     0.25   1.     1.    ]
 [1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 4 3]
Sum of distances for optimal body condition assignment: 
1.9375
Distance between rule bodies: 
0.3875
Distance between rules: 
0.375
Similarity of rules: 
0.625

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375   0.3125  1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.     ]
 [0.375   0.3125  1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[3 0 2 1 4 5 6 7]
Sum of distances for optimal body condition assignment: 
6.65625
Distance between rule bodies: 
0.83203125
Distance between rules: 
0.7743055555555555
Similarity of rules: 
0.22569444444444453

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         1.        ]
 [0.28125    0.375      1.         0.09375    1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         0.3125     1.
  1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.        ]]
Optimal Body Condition Assignment: 
[0 3 4 1 2 5 7 6]
Sum of distances for optimal body condition assignment: 
4.395833333333333
Distance between rule bodies: 
0.5494791666666666
Distance between rules: 
0.4953703703703703
Similarity of rules: 
0.5046296296296298

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125  0.28125 0.28125 1.      1.      1.      1.      1.     ]
 [0.375   0.375   0.375   1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 4 3 2 0 5 6 7]
Sum of distances for optimal body condition assignment: 
5.90625
Distance between rule bodies: 
0.73828125
Distance between rules: 
0.6909722222222222
Similarity of rules: 
0.3090277777777778

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 0.3125 1.     1.     1.     1.     1.     1.    ]
 [0.375  0.375  1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.     1.     1.     1.    ]
 [0.3125 0.3125 1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 3 2 1 4 5 6 7]
Sum of distances for optimal body condition assignment: 
6.625
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125  0.0625  0.3125  1.      1.      1.      1.      1.     ]
 [0.375   0.34375 0.09375 1.      1.      1.      1.      1.     ]
 [1.      1.      1.      0.25    1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[1 2 3 0 4 5 6 7]
Sum of distances for optimal body condition assignment: 
4.71875
Distance between rule bodies: 
0.58984375
Distance between rules: 
0.5590277777777778
Similarity of rules: 
0.4409722222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.3125  0.375   1.      1.      1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.     ]
 [0.3125  0.375   1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[3 1 2 0 7 5 6 4]
Sum of distances for optimal body condition assignment: 
6.15625
Distance between rule bodies: 
0.76953125
Distance between rules: 
0.7152777777777778
Similarity of rules: 
0.2847222222222222

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(withinArea(Vessel,nearCoast),true),T),
	velocity(Vessel,Speed,_,T),
	>(Speed,5).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)], [('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('holdsAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('>', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(leavesArea(Vessel,nearCoast),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	velocity(Vessel,Speed,_,T),
	=<(Speed,5).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('velocity', 3)]], 'Speed': [[('velocity', 1)], [('=<', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	holdsAt(=(driftingConditions(CoG,Speed),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,_TrueHeading),T),
	-(holdsAt(=(driftingConditions(CoG,Speed),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 2)], [('-', 0), ('holdsAt', 0), ('=', 0), ('driftingConditions', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	holdsAt(=(trawlingSpeed(Vessel),true),T),
	checkHeadingVariability(Vessel,T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)], [('checkHeadingVariability', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)], [('checkHeadingVariability', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_CoG,_TrueHeading),T),
	-(holdsAt(=(trawlingSpeed(Vessel),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('velocity', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('trawlingSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	-(checkHeadingVariability(Vessel,T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('-', 0), ('checkHeadingVariability', 0)]], 'T': [[('terminatedAt', 1)], [('-', 0), ('checkHeadingVariability', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(velocity(Vessel,Speed),trawlingSpeed),I1),
	holdsFor(=(withinArea(Vessel,fishingArea),true),I2),
	intersect_all(list(I1,I2),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'I1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375   0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.28125 1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[10  8  0  3  4  5  6  7  2  9  1 11 12]
Sum of distances for optimal body condition assignment: 
11.15625
Distance between rule bodies: 
0.8581730769230769
Distance between rules: 
0.8191964285714285
Similarity of rules: 
0.1808035714285715

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375   0.3125  1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.3125  1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.3125  1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.28125 0.375   1.      0.09375 1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.28125 0.375   1.      0.09375 1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.3125  1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.3125  1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.28125 1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.28125 1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[10  8  6  5  3  0  4  7  2  9  1 11 12]
Sum of distances for optimal body condition assignment: 
9.46875
Distance between rule bodies: 
0.7283653846153846
Distance between rules: 
0.6986607142857143
Similarity of rules: 
0.3013392857142857

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(lowSpeed(Vessel1),true),Is1),
	holdsFor(=(lowSpeed(Vessel2),true),Is2),
	intersect_all(list(Ip,Is1,Is2),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.28125    0.3125     0.0625     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [0.3125     0.28125    0.28125    1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [0.3125     0.28125    0.28125    1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [0.375      0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [0.375      0.375      0.375      1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         0.33333333 1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [0.3125     0.3125     0.3125     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [0.3125     0.3125     0.3125     1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[ 2  8  1  0  4  5  6  7  3  9 10 11 12]
Sum of distances for optimal body condition assignment: 
9.989583333333332
Distance between rule bodies: 
0.7684294871794871
Distance between rules: 
0.7358630952380951
Similarity of rules: 
0.2641369047619049

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(piloting(PilotBoat,NavigatedVessel),true),I) :- 
	holdsFor(=(proximity(PilotBoat,NavigatedVessel),true),Ip),
	holdsFor(=(pilotOps(PilotBoat,NavigatedVessel),true),Io),
	intersect_all(list(Ip,Io),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'PilotBoat': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('pilotOps', 0)]], 'NavigatedVessel': [[('holdsFor', 0), ('=', 0), ('piloting', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('pilotOps', 1)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Io': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.28125 0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.3125  1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[ 0  8  1  3  4  5  6  7  2  9 10 11 12]
Sum of distances for optimal body condition assignment: 
11.09375
Distance between rule bodies: 
0.8533653846153846
Distance between rules: 
0.8147321428571428
Similarity of rules: 
0.1852678571428572

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	holdsFor(=(stopped(Vessel1),true),Is1),
	holdsFor(=(stopped(Vessel2),true),Is2),
	union_all(list(Is1,Is2),Is),
	intersect_all(list(Ip,Is),I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.28125 0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.0625  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.0625  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.34375 0.09375 1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.34375 0.09375 1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      0.25    1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      0.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.5     1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.3125  0.3125  1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[ 0  6  1  8  2  5  7  3  4  9 10 11 12]
Sum of distances for optimal body condition assignment: 
8.9375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6607142857142857
Similarity of rules: 
0.3392857142857143

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Ia),
	holdsFor(=(velocity(Vessel,Speed,_,_),stopped),Iv),
	intersect_all(list(Ia,Iv),I),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('velocity', 0)]], 'I': [[('holdsFor', 1)], [('intersect_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Area': [[('holdsFor', 0), ('=', 0), ('withinArea', 1)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Speed': [[('holdsFor', 0), ('=', 0), ('velocity', 1)]], 'Iv': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125  0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.3125  0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.28125 0.375   1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[10  8  1  3  4  5  6  7  2  9  0 11 12]
Sum of distances for optimal body condition assignment: 
11.15625
Distance between rule bodies: 
0.8581730769230769
Distance between rules: 
0.8191964285714285
Similarity of rules: 
0.1808035714285715

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0
Rule distances: 
[[0.         0.66666667 0.83333333 ... 1.         1.         1.        ]
 [0.66666667 0.         0.42708333 ... 1.         1.         1.        ]
 [0.83333333 0.42708333 0.         ... 1.         1.         1.        ]
 ...
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]]
Optimal Rule Assignment: 
[ 0  1  2  3  4  5  6 27 29 48 25 22 24 33 40 26 11 41  7 34 20 21 12 23
 14 39  8 10 28 15 30 31 32 16 49 35 36 37 38  9 13 19 42 43 44 45 46 47
 17 18 50]
Sum of distances for optimal rule assignment: 
37.59704861111111
Distance between event descriptions: 
0.7371970315904139
Event Description Similarity: 
0.26280296840958606
