Event Description 1: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).

terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).

terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).

terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).

terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).

initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).

initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).

initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).

terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).

holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).

initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).

terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).

initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).

terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).

holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).

initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).

terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).

initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).

terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).

holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).

holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.

_dummy_rule :- 
	.



Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  0.5]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666
Similarity of rules: 
0.33333333333333337

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  0.5]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666
Similarity of rules: 
0.33333333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4270833333333333
Similarity of rules: 
0.5729166666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,Area),T),
	areaType(Area,AreaType).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Area': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4270833333333333
Similarity of rules: 
0.5729166666666667

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,_AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.34375
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5729166666666666
Similarity of rules: 
0.42708333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.7916666666666666
Similarity of rules: 
0.20833333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.34375
Body atom distances: 
[[0.375 1.   ]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.375
Distance between rule bodies: 
0.6875
Distance between rules: 
0.5729166666666666
Similarity of rules: 
0.42708333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Similarity of rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_PortStatus),T) :- 
	happensAt(gap_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25     1.      ]
 [1.       0.015625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.265625
Distance between rule bodies: 
0.1328125
Distance between rules: 
0.109375
Similarity of rules: 
0.890625

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),nearPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25      1.       ]
 [1.        0.0078125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.2578125
Distance between rule bodies: 
0.12890625
Distance between rules: 
0.10677083333333333
Similarity of rules: 
0.8932291666666666

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(stopped(Vessel),farFromPorts),T) :- 
	happensAt(stop_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(stop_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('stop_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(stopped(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('stopped', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(slow_motion_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('slow_motion_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(lowSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('lowSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_start(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_start', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(change_in_speed_end(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('change_in_speed_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(changingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('changingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25    1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.03125 1.      1.     ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.28125
Distance between rule bodies: 
0.5703125
Distance between rules: 
0.48125
Similarity of rules: 
0.51875

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.7625000000000001
Similarity of rules: 
0.23749999999999993

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.7312500000000001
Similarity of rules: 
0.26874999999999993

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.7250000000000001
Similarity of rules: 
0.2749999999999999

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	-(inRange(Speed,0,HcNearCoastMax)),
	holdsAt(=(withinArea(Vessel,nearCoast),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.09375
Distance between rule bodies: 
0.6979166666666666
Distance between rules: 
0.5390625
Similarity of rules: 
0.4609375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125
Similarity of rules: 
0.46875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(hcNearCoastMax,HcNearCoastMax),
	inRange(Speed,0,HcNearCoastMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'HcNearCoastMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,nearCoast),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeedNearCoast', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.25
Distance between rule bodies: 
0.85
Distance between rules: 
0.7291666666666666
Similarity of rules: 
0.27083333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8125
Similarity of rules: 
0.1875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8125
Similarity of rules: 
0.1875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.25
Distance between rule bodies: 
0.85
Distance between rules: 
0.7291666666666666
Similarity of rules: 
0.27083333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.09375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.09375
Distance between rule bodies: 
0.81875
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.34375
Distance between rule bodies: 
0.86875
Distance between rules: 
0.890625
Similarity of rules: 
0.109375

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.0625 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6979166666666666
Similarity of rules: 
0.30208333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.8625
Distance between rules: 
0.8854166666666666
Similarity of rules: 
0.11458333333333337

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),below),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,_Max,_Avg),
	thresholds(movingMin,MovingMin),
	inRange(Speed,MovingMin,Min).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 2)]], 'MovingMin': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.64375
Similarity of rules: 
0.35624999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.6375000000000001
Similarity of rules: 
0.36249999999999993

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),normal),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,Min,Max,_Avg),
	inRange(Speed,Min,Max).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Min': [[('typeSpeed', 1)], [('inRange', 1)]], 'Max': [[('typeSpeed', 2)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.64375
Similarity of rules: 
0.35624999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.6375000000000001
Similarity of rules: 
0.36249999999999993

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(movingSpeed(Vessel),above),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	vesselType(Vessel,Type),
	typeSpeed(Type,_Min,Max,_Avg),
	inRange(Speed,Max,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('vesselType', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'Type': [[('vesselType', 1)], [('typeSpeed', 0)]], 'Max': [[('typeSpeed', 2)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  0.5 1. ]]
Optimal Body Condition Assignment: 
[0 2 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
0.6666666666666666
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.09375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.09375
Distance between rule bodies: 
0.6979166666666666
Distance between rules: 
0.5546875
Similarity of rules: 
0.4453125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.546875
Similarity of rules: 
0.453125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(movingMin,MovingMin),
	-(inRange(Speed,MovingMin,inf)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'MovingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333
Similarity of rules: 
0.5416666666666667

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(movingSpeed(Vessel),_Status),T) :- 
	happensAt(start(=(gap(Vessel),_GapStatus)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('movingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 0.375 1.    0.375 1.    1.    1.   ]
 [0.375 0.375 1.    0.125 1.    1.    1.   ]
 [0.375 0.375 1.    0.375 1.    1.    1.   ]
 [1.    1.    1.    1.    0.5   1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 3 1 4 2 5 6]
Sum of distances for optimal body condition assignment: 
4.375
Distance between rule bodies: 
0.625
Distance between rules: 
0.5859375
Similarity of rules: 
0.4140625

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5   1.    1.    0.375 0.375 1.    1.   ]
 [0.5   1.    1.    0.375 0.375 1.    1.   ]
 [0.5   1.    1.    0.375 0.375 1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[3 4 0 1 2 5 6]
Sum of distances for optimal body condition assignment: 
5.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.6953125
Similarity of rules: 
0.3046875

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5   1.    1.    0.375 1.    1.    1.    1.    1.   ]
 [0.5   1.    1.    0.375 1.    1.    1.    1.    1.   ]
 [0.5   1.    1.    0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    0.5   1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[3 0 2 6 1 4 5 7 8]
Sum of distances for optimal body condition assignment: 
7.375
Distance between rule bodies: 
0.8194444444444444
Distance between rules: 
0.76875
Similarity of rules: 
0.23124999999999996

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5   0.375 0.375 1.    1.    1.    1.    1.   ]
 [0.5   0.375 0.375 1.    1.    1.    1.    1.   ]
 [0.5   0.375 0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    0.375 1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[1 2 0 5 3 4 6 7]
Sum of distances for optimal body condition assignment: 
5.625
Distance between rule bodies: 
0.703125
Distance between rules: 
0.6597222222222222
Similarity of rules: 
0.3402777777777778

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8020833333333333
Similarity of rules: 
0.19791666666666674

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(underWay(Vessel),true),I) :- 
	holdsFor(=(movingSpeed(Vessel),below),I1),
	holdsFor(=(movingSpeed(Vessel),normal),I2),
	holdsFor(=(movingSpeed(Vessel),above),I3),
	union_all(list(I1,I2,I3),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('underWay', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)], [('holdsFor', 0), ('=', 0), ('movingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)]], 'I1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'I2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I3': [[('holdsFor', 1)], [('union_all', 0), ('list', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.8303571428571428
Similarity of rules: 
0.1696428571428572

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25   1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.    ]
 [1.     0.0625 1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 5 2 3 4 1]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.71875
Distance between rules: 
0.6339285714285714
Similarity of rules: 
0.3660714285714286

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.8392857142857142
Similarity of rules: 
0.1607142857142858

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 4 2 3 1 5]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.7589285714285714
Similarity of rules: 
0.2410714285714286

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.9285714285714285
Similarity of rules: 
0.07142857142857151

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    0.5   1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 4 2 3 1 5]
Sum of distances for optimal body condition assignment: 
4.875
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7366071428571428
Similarity of rules: 
0.2633928571428572

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.375
Distance between rule bodies: 
0.8958333333333334
Distance between rules: 
0.9107142857142857
Similarity of rules: 
0.0892857142857143

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    0.5   0.5   1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 4 3 2 5]
Sum of distances for optimal body condition assignment: 
4.875
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7410714285714285
Similarity of rules: 
0.2589285714285715

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]
 [1.    1.    1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
5.375
Distance between rule bodies: 
0.8958333333333334
Distance between rules: 
0.9107142857142857
Similarity of rules: 
0.0892857142857143

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	=\=(TrueHeading,511.0),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	>(AngleDiff,AdriftAngThr),
	holdsAt(=(underWay(Vessel),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('underWay', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=\\=', 0)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('>', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('>', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.375
Distance between rule bodies: 
0.84375
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      0.5     1.      1.     ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
2.59375
Distance between rule bodies: 
0.6484375
Distance between rules: 
0.51875
Similarity of rules: 
0.48124999999999996

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.375 1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.375
Distance between rule bodies: 
0.84375
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125 1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    1.    1.    1.   ]
 [1.    0.5   0.5   1.   ]]
Optimal Body Condition Assignment: 
[0 1 3 2]
Sum of distances for optimal body condition assignment: 
2.625
Distance between rule bodies: 
0.65625
Distance between rules: 
0.5375
Similarity of rules: 
0.4625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,CourseOverGround,TrueHeading),T),
	absoluteAngleDiff(CourseOverGround,TrueHeading,AngleDiff),
	thresholds(adriftAngThr,AdriftAngThr),
	=<(AngleDiff,AdriftAngThr).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CourseOverGround': [[('happensAt', 0), ('velocity', 2)], [('absoluteAngleDiff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('absoluteAngleDiff', 1)]], 'AngleDiff': [[('absoluteAngleDiff', 2)], [('=<', 0)]], 'AdriftAngThr': [[('thresholds', 1)], [('=<', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.     ]
 [1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.34375
Distance between rule bodies: 
0.671875
Distance between rules: 
0.78125
Similarity of rules: 
0.21875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.0625 1.    ]
 [1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.35416666666666663
Similarity of rules: 
0.6458333333333334

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.09375
Distance between rule bodies: 
0.6979166666666666
Distance between rules: 
0.5390625
Similarity of rules: 
0.4609375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,_Speed,_CourseOverGround,511.0),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.03125
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4270833333333333
Similarity of rules: 
0.5729166666666667

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(end(=(underWay(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('underWay', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0
Body atom distances: 
[[0.         0.375      1.         0.3125     1.         1.
  1.        ]
 [0.375      0.         1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.         1.         1.         1.
  1.        ]
 [0.3125     0.375      1.         0.         1.         1.
  1.        ]
 [1.         1.         1.         1.         0.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.16666667]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
1.1666666666666667
Distance between rule bodies: 
0.16666666666666669
Distance between rules: 
0.14583333333333334
Similarity of rules: 
0.8541666666666666

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25       1.         1.         0.375      0.375      1.
  1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.        ]
 [1.         1.         0.3125     1.         1.         1.
  1.        ]
 [0.5        1.         1.         0.375      0.375      1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]]
Optimal Body Condition Assignment: 
[0 3 2 4 1 5 6]
Sum of distances for optimal body condition assignment: 
3.5833333333333335
Distance between rule bodies: 
0.511904761904762
Distance between rules: 
0.45572916666666674
Similarity of rules: 
0.5442708333333333

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.375  1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.125  0.375  1.     1.     1.    ]
 [0.5    1.     1.     0.375  1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.3125 1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 3 4 2 6 1 8 5 7]
Sum of distances for optimal body condition assignment: 
5.75
Distance between rule bodies: 
0.6388888888888888
Distance between rules: 
0.6062500000000001
Similarity of rules: 
0.39374999999999993

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    0.375  0.375  1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     0.375  0.375  1.     1.     1.    ]
 [0.5    0.375  0.375  1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.5    1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[1 2 3 0 5 4 7 6]
Sum of distances for optimal body condition assignment: 
4.5625
Distance between rule bodies: 
0.5703125
Distance between rules: 
0.5416666666666666
Similarity of rules: 
0.45833333333333337

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 6 5 4]
Sum of distances for optimal body condition assignment: 
6.0
Distance between rule bodies: 
0.8571428571428571
Distance between rules: 
0.7890625
Similarity of rules: 
0.2109375

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Istfp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Ia),
	intersect_all(list(Istfp,Ia),Ista),
	holdsFor(=(stopped(Vessel),nearPorts),Istnp),
	union_all(list(Ista,Istnp),Ii),
	thresholds(aOrMTime,AOrMTime),
	intDurGreater(Ii,AOrMTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Istfp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Ia': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ista': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Istnp': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'AOrMTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.775
Similarity of rules: 
0.22499999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.6312500000000001
Similarity of rules: 
0.3687499999999999

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	inRange(Speed,TuggingMin,TuggingMax).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8
Similarity of rules: 
0.19999999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.6312500000000001
Similarity of rules: 
0.3687499999999999

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 3 2 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(tuggingMin,TuggingMin),
	thresholds(tuggingMax,TuggingMax),
	-(inRange(Speed,TuggingMin,TuggingMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TuggingMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TuggingMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(tuggingSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('tuggingSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 2 1 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125      0.3125     1.         0.375      1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [0.375      0.0625     1.         0.375      1.         1.
  1.         1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.         1.        ]]
Optimal Body Condition Assignment: 
[0 4 8 5 1 3 2 7 6]
Sum of distances for optimal body condition assignment: 
5.395833333333333
Distance between rule bodies: 
0.599537037037037
Distance between rules: 
0.5458333333333333
Similarity of rules: 
0.4541666666666667

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25       1.         1.         0.3125     0.3125     1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.         1.        ]]
Optimal Body Condition Assignment: 
[0 1 8 5 4 3 2 7 6]
Sum of distances for optimal body condition assignment: 
5.708333333333333
Distance between rule bodies: 
0.6342592592592592
Distance between rules: 
0.5770833333333333
Similarity of rules: 
0.4229166666666667

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.5    0.5    1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5   ]]
Optimal Body Condition Assignment: 
[3 4 1 2 0 6 5 7 8]
Sum of distances for optimal body condition assignment: 
6.8125
Distance between rule bodies: 
0.7569444444444444
Distance between rules: 
0.7125
Similarity of rules: 
0.2875

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     0.5    0.5    1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.5    1.    ]]
Optimal Body Condition Assignment: 
[1 5 6 3 2 0 4 8 7]
Sum of distances for optimal body condition assignment: 
6.125
Distance between rule bodies: 
0.6805555555555556
Distance between rules: 
0.64375
Similarity of rules: 
0.35624999999999996

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  0.5 1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 8 5 6 7 4]
Sum of distances for optimal body condition assignment: 
7.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.78125
Similarity of rules: 
0.21875

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(tugging(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsTug(Vessel1,Vessel2),
	-(oneIsPilot(Vessel1,Vessel2)),
	-(twoAreTugs(Vessel1,Vessel2)),
	holdsFor(=(tuggingSpeed(Vessel1),true),Its1),
	holdsFor(=(tuggingSpeed(Vessel2),true),Its2),
	intersect_all(list(Ip,Its1,Its2),Ii),
	thresholds(tuggingTime,TuggingTime),
	intDurGreater(Ii,TuggingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('-', 0), ('twoAreTugs', 0)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('tugging', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('-', 0), ('twoAreTugs', 1)], [('holdsFor', 0), ('=', 0), ('tuggingSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Its1': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Its2': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TuggingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
9.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
17.5
Distance between rule bodies: 
0.9722222222222222
Distance between rules: 
0.9736842105263157
Similarity of rules: 
0.026315789473684292

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.28125    0.375      1.         0.09375    1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.28125    0.375      1.         0.09375    1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]]
Optimal Body Condition Assignment: 
[11  7  9  5 17  3  0  4  8  2 10  1 12 13 14 15 16  6]
Sum of distances for optimal body condition assignment: 
13.802083333333334
Distance between rule bodies: 
0.7667824074074074
Distance between rules: 
0.7297149122807017
Similarity of rules: 
0.27028508771929827

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.375      0.375      1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.375      0.375      1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         0.5        1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.         1.         1.         1.         1.
  1.         1.         1.         1.         1.         1.        ]]
Optimal Body Condition Assignment: 
[ 3  9  1  4  0  5 17  7  8  2 10 11 12 13 14 15 16  6]
Sum of distances for optimal body condition assignment: 
14.958333333333334
Distance between rule bodies: 
0.8310185185185186
Distance between rules: 
0.7905701754385965
Similarity of rules: 
0.20942982456140347

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.375  1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.375  1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.5    0.5    1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5    1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[ 3  2  1  0  4  9  7  6 17  5 10 11 12 13 14 15 16  8]
Sum of distances for optimal body condition assignment: 
15.1875
Distance between rule bodies: 
0.84375
Distance between rules: 
0.8157894736842105
Similarity of rules: 
0.1842105263157895

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.375  0.375  1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.375  0.375  1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.5    1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.5    1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     0.5    0.5    1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.5    1.     1.
  1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[ 1  9  3  2  0 17  6  5  8  4 10 11 12 13 14 15 16  7]
Sum of distances for optimal body condition assignment: 
14.625
Distance between rule bodies: 
0.8125
Distance between rules: 
0.7845394736842105
Similarity of rules: 
0.2154605263157895

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 0  2  1  3 17  5  6  7  8  9 10 11 12 13 14 15 16  4]
Sum of distances for optimal body condition assignment: 
16.5
Distance between rule bodies: 
0.9166666666666666
Distance between rules: 
0.8848684210526315
Similarity of rules: 
0.11513157894736847

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	-(oneIsTug(Vessel1,Vessel2)),
	-(oneIsPilot(Vessel1,Vessel2)),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),If),
	\=(If,list),
	holdsFor(=(withinArea(Vessel1,nearPorts),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearPorts),true),Iw2),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw3),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw4),
	relative_complement_all(If,list(Iw1,Iw2,Iw3,Iw4),Ii),
	thresholds(rendezvousTime,RendezvousTime),
	intDurGreater(Ii,RendezvousTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('-', 0), ('oneIsTug', 0)], [('-', 0), ('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('-', 0), ('oneIsTug', 1)], [('-', 0), ('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'If': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Iw3': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 2)]], 'Iw4': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 3)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'RendezvousTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17]
Sum of distances for optimal body condition assignment: 
18.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8020833333333333
Similarity of rules: 
0.19791666666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25    1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      0.03125 1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 4 2 3 1]
Sum of distances for optimal body condition assignment: 
3.28125
Distance between rule bodies: 
0.65625
Distance between rules: 
0.5677083333333333
Similarity of rules: 
0.43229166666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8125
Similarity of rules: 
0.1875

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.8020833333333333
Similarity of rules: 
0.19791666666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.34375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.34375
Distance between rule bodies: 
0.86875
Distance between rules: 
0.7760416666666666
Similarity of rules: 
0.22395833333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.34375
Distance between rule bodies: 
0.86875
Distance between rules: 
0.890625
Similarity of rules: 
0.109375

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.8625
Distance between rules: 
0.7708333333333333
Similarity of rules: 
0.22916666666666674

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.3125
Distance between rule bodies: 
0.8625
Distance between rules: 
0.8854166666666666
Similarity of rules: 
0.11458333333333337

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	inRange(Speed,TrawlspeedMin,TrawlspeedMax),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  0.5 1.  1. ]]
Optimal Body Condition Assignment: 
[0 3 2 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
0.75
Distance between rules: 
0.8
Similarity of rules: 
0.19999999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.675
Similarity of rules: 
0.32499999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]
 [1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.5
Distance between rule bodies: 
0.875
Distance between rules: 
0.9
Similarity of rules: 
0.09999999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]
 [1.   1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.25
Distance between rule bodies: 
0.8125
Distance between rules: 
0.6625000000000001
Similarity of rules: 
0.3374999999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.34375
Distance between rule bodies: 
0.8359375
Distance between rules: 
0.86875
Similarity of rules: 
0.13124999999999998

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]
 [1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.09375
Distance between rule bodies: 
0.7734375
Distance between rules: 
0.6312500000000001
Similarity of rules: 
0.3687499999999999

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.3125
Distance between rule bodies: 
0.828125
Distance between rules: 
0.8625
Similarity of rules: 
0.13749999999999996

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.0625 1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]
 [1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
3.0625
Distance between rule bodies: 
0.765625
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  0.5 1.  1. ]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 3 2 4]
Sum of distances for optimal body condition assignment: 
4.5
Distance between rule bodies: 
0.9
Distance between rules: 
0.9166666666666666
Similarity of rules: 
0.08333333333333337

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_Heading,_),T),
	thresholds(trawlspeedMin,TrawlspeedMin),
	thresholds(trawlspeedMax,TrawlspeedMax),
	-(inRange(Speed,TrawlspeedMin,TrawlspeedMax)).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('-', 0), ('inRange', 0)]], 'TrawlspeedMin': [[('thresholds', 1)], [('-', 0), ('inRange', 1)]], 'TrawlspeedMax': [[('thresholds', 1)], [('-', 0), ('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlSpeed(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlSpeed', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25    1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.28125
Distance between rule bodies: 
0.140625
Distance between rules: 
0.13541666666666666
Similarity of rules: 
0.8645833333333334

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.703125
Similarity of rules: 
0.296875

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T),
	holdsAt(=(withinArea(Vessel,fishing),true),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(trawlingMovement(Vessel),true),T) :- 
	happensAt(end(=(withinArea(Vessel,fishing),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawlingMovement', 0)], [('happensAt', 0), ('end', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.0625     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.25       1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[0 1 2 3 6 4 5]
Sum of distances for optimal body condition assignment: 
3.770833333333333
Distance between rule bodies: 
0.5386904761904762
Distance between rules: 
0.47916666666666663
Similarity of rules: 
0.5208333333333334

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25       1.         1.         0.3125     0.3125     1.
  1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.        ]
 [1.         1.         0.3125     1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[0 3 2 1 6 4 5]
Sum of distances for optimal body condition assignment: 
4.208333333333334
Distance between rule bodies: 
0.6011904761904763
Distance between rules: 
0.5338541666666667
Similarity of rules: 
0.46614583333333326

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.375  0.375  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[3 0 4 1 8 2 5 6 7]
Sum of distances for optimal body condition assignment: 
6.6875
Distance between rule bodies: 
0.7430555555555556
Distance between rules: 
0.7000000000000001
Similarity of rules: 
0.29999999999999993

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     0.375  0.375  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[1 2 3 0 7 4 5 6]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6458333333333333
Similarity of rules: 
0.35416666666666674

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  0.5]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(trawling(Vessel),true),I) :- 
	holdsFor(=(trawlSpeed(Vessel),true),It),
	holdsFor(=(trawlingMovement(Vessel),true),Itc),
	intersect_all(list(It,Itc),Ii),
	thresholds(trawlingTime,TrawlingTime),
	intDurGreater(Ii,TrawlingTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('trawling', 0)], [('holdsFor', 0), ('=', 0), ('trawlSpeed', 0)], [('holdsFor', 0), ('=', 0), ('trawlingMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Itc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]], 'TrawlingTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.09375
Distance between rule bodies: 
0.6979166666666666
Distance between rules: 
0.5390625
Similarity of rules: 
0.4609375

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125
Similarity of rules: 
0.46875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,SarMinSpeed,inf).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.59375
Similarity of rules: 
0.40625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.34375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.34375
Distance between rule bodies: 
0.78125
Distance between rules: 
0.8359375
Similarity of rules: 
0.1640625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.09375 1.      1.     ]
 [1.      1.      1.     ]
 [1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.09375
Distance between rule bodies: 
0.6979166666666666
Distance between rules: 
0.5390625
Similarity of rules: 
0.4609375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.3125 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.3125
Distance between rule bodies: 
0.7708333333333334
Distance between rules: 
0.828125
Similarity of rules: 
0.171875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.0625 1.     1.    ]
 [1.     1.     1.    ]
 [1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0625
Distance between rule bodies: 
0.6875
Distance between rules: 
0.53125
Similarity of rules: 
0.46875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,_,_),T),
	thresholds(sarMinSpeed,SarMinSpeed),
	inRange(Speed,0,SarMinSpeed).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('inRange', 0)]], 'SarMinSpeed': [[('thresholds', 1)], [('inRange', 2)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarSpeed(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarSpeed', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(change_in_heading(Vessel),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('change_in_heading', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
0.375
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.625
Similarity of rules: 
0.375

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.5
Distance between rule bodies: 
0.5
Distance between rules: 
0.75
Similarity of rules: 
0.25

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 initiatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(changingSpeed(Vessel),true)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('changingSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.15625
Similarity of rules: 
0.84375

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.125
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875
Similarity of rules: 
0.8125

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1. ]
 [1.  1. ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.5
Distance between rule bodies: 
0.75
Distance between rules: 
0.8333333333333333
Similarity of rules: 
0.16666666666666674

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4375
Similarity of rules: 
0.5625

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[0.5 1.  1. ]
 [1.  1.  1. ]
 [1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.5
Distance between rule bodies: 
0.8333333333333334
Distance between rules: 
0.875
Similarity of rules: 
0.125

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25 1.   1.  ]
 [1.   1.   1.  ]
 [1.   1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.25
Distance between rule bodies: 
0.75
Distance between rules: 
0.578125
Similarity of rules: 
0.421875

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6]
Sum of distances for optimal body condition assignment: 
6.5
Distance between rule bodies: 
0.9285714285714286
Distance between rules: 
0.9375
Similarity of rules: 
0.0625

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1.  0.5 0.5 1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[1 0 2 3 4 5 6 7 8]
Sum of distances for optimal body condition assignment: 
8.5
Distance between rule bodies: 
0.9444444444444444
Distance between rules: 
0.9500000000000001
Similarity of rules: 
0.04999999999999993

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4]
Sum of distances for optimal body condition assignment: 
5.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 terminatedAt(=(sarMovement(Vessel),true),T) :- 
	happensAt(start(=(gap(Vessel),_Status)),T).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('sarMovement', 0)], [('happensAt', 0), ('start', 0), ('=', 0), ('gap', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.125      0.3125     1.         0.375      1.         1.
  1.        ]
 [0.375      0.0625     1.         0.375      1.         1.
  1.        ]
 [1.         1.         0.25       1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[0 1 2 6 3 4 5]
Sum of distances for optimal body condition assignment: 
3.770833333333333
Distance between rule bodies: 
0.5386904761904762
Distance between rules: 
0.47916666666666663
Similarity of rules: 
0.5208333333333334

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.25       1.         1.         0.3125     0.3125     1.
  1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.        ]
 [1.         1.         0.3125     1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]
 [1.         1.         1.         1.         1.         1.
  1.        ]]
Optimal Body Condition Assignment: 
[0 3 2 6 1 4 5]
Sum of distances for optimal body condition assignment: 
4.208333333333333
Distance between rule bodies: 
0.6011904761904762
Distance between rules: 
0.5338541666666666
Similarity of rules: 
0.46614583333333337

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     0.375  0.375  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[3 0 4 8 1 2 5 6 7]
Sum of distances for optimal body condition assignment: 
6.6875
Distance between rule bodies: 
0.7430555555555556
Distance between rules: 
0.7000000000000001
Similarity of rules: 
0.29999999999999993

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     0.375  0.375  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[1 2 3 7 0 4 5 6]
Sum of distances for optimal body condition assignment: 
5.5
Distance between rule bodies: 
0.6875
Distance between rules: 
0.6458333333333333
Similarity of rules: 
0.35416666666666674

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1. ]
 [1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  0.5]
 [1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 4 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
0.8
Distance between rules: 
0.71875
Similarity of rules: 
0.28125

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(inSAR(Vessel),true),I) :- 
	holdsFor(=(sarSpeed(Vessel),true),Iss),
	holdsFor(=(sarMovement(Vessel),true),Isc),
	intersect_all(list(Iss,Isc),Ii),
	intDurGreater(Ii,3600,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('inSAR', 0)], [('holdsFor', 0), ('=', 0), ('sarSpeed', 0)], [('holdsFor', 0), ('=', 0), ('sarMovement', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Iss': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Isc': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('intDurGreater', 0)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3]
Sum of distances for optimal body condition assignment: 
4.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.375      0.3125     1.         0.375      1.         1.
  1.         1.        ]
 [0.28125    0.375      1.         0.09375    1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         0.3125     1.
  1.         1.        ]
 [0.375      0.28125    1.         0.375      1.         1.
  1.         1.        ]
 [0.375      0.3125     1.         0.375      1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.        ]]
Optimal Body Condition Assignment: 
[0 3 4 1 2 5 7 6]
Sum of distances for optimal body condition assignment: 
4.395833333333333
Distance between rule bodies: 
0.5494791666666666
Distance between rules: 
0.4953703703703703
Similarity of rules: 
0.5046296296296298

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.0625
Body atom distances: 
[[0.5        1.         1.         0.3125     0.3125     1.
  1.         1.        ]
 [0.5        1.         1.         0.375      0.375      1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.        ]
 [0.5        1.         1.         0.3125     0.3125     1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.        ]
 [1.         1.         1.         1.         1.         1.
  0.33333333 1.        ]]
Optimal Body Condition Assignment: 
[3 0 1 4 2 5 7 6]
Sum of distances for optimal body condition assignment: 
5.458333333333333
Distance between rule bodies: 
0.6822916666666666
Distance between rules: 
0.6134259259259258
Similarity of rules: 
0.3865740740740742

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.375  1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     0.5   ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[3 0 6 2 1 4 5 8 7]
Sum of distances for optimal body condition assignment: 
6.6875
Distance between rule bodies: 
0.7430555555555556
Distance between rules: 
0.7000000000000001
Similarity of rules: 
0.29999999999999993

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [0.5    0.375  0.375  1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.5    1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     0.5   ]]
Optimal Body Condition Assignment: 
[1 0 5 2 3 4 6 7]
Sum of distances for optimal body condition assignment: 
5.125
Distance between rule bodies: 
0.640625
Distance between rules: 
0.6041666666666666
Similarity of rules: 
0.39583333333333337

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.28125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  0.5 1.  1.  0.5 1.  1.  1. ]]
Optimal Body Condition Assignment: 
[0 1 2 3 7 5 6 4]
Sum of distances for optimal body condition assignment: 
7.0
Distance between rule bodies: 
0.875
Distance between rules: 
0.8090277777777777
Similarity of rules: 
0.19097222222222232

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(lowSpeed(Vessel),true),Il),
	holdsFor(=(stopped(Vessel),farFromPorts),Is),
	union_all(list(Il,Is),Ils),
	holdsFor(=(withinArea(Vessel,nearCoast),true),Inc),
	holdsFor(=(anchoredOrMoored(Vessel),true),Iam),
	relative_complement_all(Ils,list(Inc,Iam),Ii),
	thresholds(loiteringTime,LoiteringTime),
	intDurGreater(Ii,LoiteringTime,I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Il': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ils': [[('union_all', 1)], [('relative_complement_all', 0)]], 'Inc': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iam': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]], 'Ii': [[('relative_complement_all', 2)], [('intDurGreater', 0)]], 'LoiteringTime': [[('thresholds', 1)], [('intDurGreater', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5 6 7]
Sum of distances for optimal body condition assignment: 
8.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('entersArea', 0)]], 'AreaType': [[('initiatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('entersArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('leavesArea', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)], [('areaType', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'AreaID': [[('happensAt', 0), ('leavesArea', 1)], [('areaType', 0)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('withinArea', 0)], [('happensAt', 0), ('gap_start', 0)]], 'AreaType': [[('terminatedAt', 0), ('=', 0), ('withinArea', 1)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_start', 0)], [('-', 0), ('holdsAt', 0), ('=', 0), ('withinArea', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)], [('-', 0), ('holdsAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('gap', 0)], [('happensAt', 0), ('gap_end', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(enterArea(Vessel,nearCoast),T),
	>(highSpeed(Vessel),highSpeedLimit).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('enterArea', 0)], [('>', 0), ('highSpeed', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(highSpeed(Vessel),true),T) :- 
	happensAt(exitArea(Vessel,nearCoast),T),
	<(highSpeed(Vessel),lowSpeedLimit).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('highSpeed', 0)], [('happensAt', 0), ('exitArea', 0)], [('<', 0), ('highSpeed', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	>(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('>', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(drifting(Vessel),true),T) :- 
	happensAt(velocity(Vessel,CoG,_CoG,TrueHeading),T),
	=<(abs(diff(CoG,TrueHeading)),driftThreshold).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('drifting', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'CoG': [[('happensAt', 0), ('velocity', 1)], [('=<', 0), ('abs', 0), ('diff', 0)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)], [('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	>(Speed,trawlingThresholdSpeed),
	>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('initiatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('initiatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('>', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
terminatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	=<(Speed,trawlingThresholdSpeed),
	=<(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('terminatedAt', 0), ('=', 0), ('trawling', 0)], [('happensAt', 0), ('velocity', 0)]], 'T': [[('terminatedAt', 1)], [('happensAt', 1)]], 'Speed': [[('happensAt', 0), ('velocity', 1)], [('=<', 0)]], 'CoG': [[('happensAt', 0), ('velocity', 2)]], 'TrueHeading': [[('happensAt', 0), ('velocity', 3)]], 'MaxHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('=<', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
staticallyDetermined(=(trawling(Vessel),holdsFor(vesselType(Vessel,fishing),exists(MaxHeadingAngle,MinHeadingAngle),>(abs(diff(MaxHeadingAngle,MinHeadingAngle)),trawlingThresholdHeadingAngle)))) :- 
	_.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('staticallyDetermined', 0), ('=', 0), ('trawling', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 0), ('vesselType', 0)]], 'MaxHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 0)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 0)]], 'MinHeadingAngle': [[('staticallyDetermined', 0), ('=', 1), ('holdsFor', 1), ('exists', 1)], [('staticallyDetermined', 0), ('=', 1), ('holdsFor', 2), ('>', 0), ('abs', 0), ('diff', 1)]]}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(anchoredOrMoored(Vessel),true),I) :- 
	holdsFor(=(stopped(Vessel),farFromPorts),Isffp),
	holdsFor(=(withinArea(Vessel,anchorage),true),Iwa),
	intersect_all(list(Isffp,Iwa),Isa),
	holdsFor(=(stopped(Vessel),nearPorts),Isn),
	union_all(list(Isa,Isn),Ii),
	threshold(vaorm,Vaorm),
	intDurGreater(Ii,Vaorm,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('anchoredOrMoored', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'Isffp': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Iwa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isn': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Ii': [[('union_all', 1)], [('intDurGreater', 0)]], 'Vaorm': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.375   0.3125  1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.3125  1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.3125  1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.28125 0.375   1.      0.09375 1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.28125 0.375   1.      0.09375 1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.3125  1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      0.3125  1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      0.5     1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.28125 1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [0.375   0.28125 1.      0.375   1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]
 [1.      1.      1.      1.      1.      1.      1.      1.      1.
  1.      1.      1.      1.     ]]
Optimal Body Condition Assignment: 
[10  8  6  5  3  0  4  7  2  9  1 11 12]
Sum of distances for optimal body condition assignment: 
9.46875
Distance between rule bodies: 
0.7283653846153846
Distance between rules: 
0.6986607142857143
Similarity of rules: 
0.3013392857142857

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(tugging(Vessel),true),I) :- 
	holdsFor(notMovingByItself(Vessel),It),
	happensAt(association(Vessel,Tugboat),Itc),
	intersect_all(list(It,Itc),Isa),
	holdsFor(=(closeToEachOther(Vessel,Tugboat),true),Isa),
	holdsFor(=(lowerThanNormalSpeed(Vessel),true),Isa),
	threshold(vtug,Vtug),
	intDurGreater(Isa,Vtug,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('tugging', 0)], [('holdsFor', 0), ('notMovingByItself', 0)], [('happensAt', 0), ('association', 0)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 0)], [('holdsFor', 0), ('=', 0), ('lowerThanNormalSpeed', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)]], 'Tugboat': [[('happensAt', 0), ('association', 1)], [('holdsFor', 0), ('=', 0), ('closeToEachOther', 1)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Isa': [[('intersect_all', 1)], [('holdsFor', 1)], [('holdsFor', 1)], [('intDurGreater', 0)]], 'Vtug': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 0.3125 1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 0.3125 1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 0.3125 1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.375  0.375  1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.375  0.375  1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     0.5    1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 0.3125 1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 0.3125 1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[ 3  1  4  0  8  5  6  7  2  9 10 11 12]
Sum of distances for optimal body condition assignment: 
10.625
Distance between rule bodies: 
0.8173076923076923
Distance between rules: 
0.78125
Similarity of rules: 
0.21875

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(piloting(Vessel),true),I) :- 
	holdsFor(highlyExperiencedSailor(MaritimePilot),It),
	happensAt(approaches(PilotBoat,Vessel),Itc),
	happensAt(boards(MaritimePilot,Vessel),Ib),
	holdsFor(=(manoeuvres(Vessel,MaritimePilot),true),Ia),
	intersect_all(list(It,Itc),Isa),
	intersect_all(list(It,Ib),Isb),
	union_all(list(Isa,Isb),I),
	threshold(vpil,Vpil),
	intDurGreater(I,Vpil,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('piloting', 0)], [('happensAt', 0), ('approaches', 1)], [('happensAt', 0), ('boards', 1)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'MaritimePilot': [[('holdsFor', 0), ('highlyExperiencedSailor', 0)], [('happensAt', 0), ('boards', 0)], [('holdsFor', 0), ('=', 0), ('manoeuvres', 1)]], 'It': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 0), ('list', 0)]], 'PilotBoat': [[('happensAt', 0), ('approaches', 0)]], 'Itc': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ib': [[('happensAt', 1)], [('intersect_all', 0), ('list', 1)]], 'Ia': [[('holdsFor', 1)]], 'Isa': [[('intersect_all', 1)], [('union_all', 0), ('list', 0)]], 'Isb': [[('intersect_all', 1)], [('union_all', 0), ('list', 1)]], 'Vpil': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.375  1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.375  1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     0.375  1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     0.5    0.5    1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    1.     1.     0.3125 1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[ 3  2  0  1  4  8  6  7  5  9 10 11 12]
Sum of distances for optimal body condition assignment: 
10.6875
Distance between rule bodies: 
0.8221153846153846
Distance between rules: 
0.7857142857142857
Similarity of rules: 
0.2142857142857143

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(rendezVous(Vessel1,Vessel2),true),I) :- 
	holdsFor(nearbyInOpenSea(Vessel1,Vessel2),Isa),
	holdsFor(=(stoppedOrLowSpeed(Vessel1),true),Isf),
	holdsFor(=(stoppedOrLowSpeed(Vessel2),true),Isb),
	intersect_all(list(Isa,Isf),Isa),
	intersect_all(list(Isa,Isb),Isb),
	union_all(list(Isa,Isf,Isb),I),
	threshold(vrendez,Vrendez),
	intDurGreater(I,Vrendez,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('rendezVous', 0)], [('holdsFor', 0), ('nearbyInOpenSea', 0)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('rendezVous', 1)], [('holdsFor', 0), ('nearbyInOpenSea', 1)], [('holdsFor', 0), ('=', 0), ('stoppedOrLowSpeed', 0)]], 'I': [[('holdsFor', 1)], [('union_all', 1)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'Isa': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 0)], [('intersect_all', 1)], [('intersect_all', 0), ('list', 0)], [('union_all', 0), ('list', 0)]], 'Isf': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('union_all', 0), ('list', 1)]], 'Isb': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 1)], [('intersect_all', 1)], [('union_all', 0), ('list', 2)]], 'Vrendez': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    0.375  0.375  1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    0.375  0.375  1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.5    1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     0.5    1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     0.5    0.5    1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [0.5    0.3125 0.3125 1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]
 [1.     1.     1.     1.     1.     1.     1.     1.     1.     1.
  1.     1.     1.    ]]
Optimal Body Condition Assignment: 
[ 1  3  2  0  8  6  5  7  4  9 10 11 12]
Sum of distances for optimal body condition assignment: 
10.125
Distance between rule bodies: 
0.7788461538461539
Distance between rules: 
0.7455357142857142
Similarity of rules: 
0.2544642857142858

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(presentIn(Vessel,ParticularArea),Isa),
	intDurGreater(Isa,Vlong,I),
	-(holdsFor(evidentPurpose(Vessel),Isa)),
	threshold(vloiter,Vloiter),
	intDurGreater(I,Vloiter,I).

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{'Vessel': [[('holdsFor', 0), ('=', 0), ('loitering', 0)], [('holdsFor', 0), ('presentIn', 0)], [('-', 0), ('holdsFor', 0), ('evidentPurpose', 0)]], 'I': [[('holdsFor', 1)], [('intDurGreater', 2)], [('intDurGreater', 0)], [('intDurGreater', 2)]], 'ParticularArea': [[('holdsFor', 0), ('presentIn', 1)]], 'Isa': [[('holdsFor', 1)], [('intDurGreater', 0)], [('-', 0), ('holdsFor', 1)]], 'Vlong': [[('intDurGreater', 1)]], 'Vloiter': [[('threshold', 1)], [('intDurGreater', 1)]]}

Distance between rule heads: 
0.3125
Body atom distances: 
[[0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [0.5 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]
 [1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
12.5
Distance between rule bodies: 
0.9615384615384616
Distance between rules: 
0.9151785714285714
Similarity of rules: 
0.0848214285714286

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0

Comparing rules:
 holdsFor(=(pilotOps(Vessel1,Vessel2),true),I) :- 
	holdsFor(=(proximity(Vessel1,Vessel2),true),Ip),
	oneIsPilot(Vessel1,Vessel2),
	holdsFor(=(lowSpeed(Vessel1),true),Il1),
	holdsFor(=(lowSpeed(Vessel2),true),Il2),
	holdsFor(=(stopped(Vessel1),farFromPorts),Is1),
	holdsFor(=(stopped(Vessel2),farFromPorts),Is2),
	union_all(list(Il1,Is1),I1b),
	union_all(list(Il2,Is2),I2b),
	intersect_all(list(I1b,I2b,Ip),Ii),
	\=(Ii,list),
	holdsFor(=(withinArea(Vessel1,nearCoast),true),Iw1),
	holdsFor(=(withinArea(Vessel2,nearCoast),true),Iw2),
	relative_complement_all(Ii,list(Iw1,Iw2),I).
 and
_dummy_rule :- 
	.

Var routes for the first rule: 
{'Vessel1': [[('holdsFor', 0), ('=', 0), ('pilotOps', 0)], [('holdsFor', 0), ('=', 0), ('proximity', 0)], [('oneIsPilot', 0)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'Vessel2': [[('holdsFor', 0), ('=', 0), ('pilotOps', 1)], [('holdsFor', 0), ('=', 0), ('proximity', 1)], [('oneIsPilot', 1)], [('holdsFor', 0), ('=', 0), ('lowSpeed', 0)], [('holdsFor', 0), ('=', 0), ('stopped', 0)], [('holdsFor', 0), ('=', 0), ('withinArea', 0)]], 'I': [[('holdsFor', 1)], [('relative_complement_all', 2)]], 'Ip': [[('holdsFor', 1)], [('intersect_all', 0), ('list', 2)]], 'Il1': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Il2': [[('holdsFor', 1)], [('union_all', 0), ('list', 0)]], 'Is1': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'Is2': [[('holdsFor', 1)], [('union_all', 0), ('list', 1)]], 'I1b': [[('union_all', 1)], [('intersect_all', 0), ('list', 0)]], 'I2b': [[('union_all', 1)], [('intersect_all', 0), ('list', 1)]], 'Ii': [[('intersect_all', 1)], [('\\=', 0)], [('relative_complement_all', 0)]], 'Iw1': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 0)]], 'Iw2': [[('holdsFor', 1)], [('relative_complement_all', 1), ('list', 1)]]}

Var routes for the second rule: 
{}

Distance between rule heads: 
1
Body atom distances: 
[[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]
Optimal Body Condition Assignment: 
[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
Sum of distances for optimal body condition assignment: 
13.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0
Similarity of rules: 
0.0
Rule distances: 
[[0.         0.66666667 0.83333333 ... 1.         1.         1.        ]
 [0.66666667 0.         0.42708333 ... 1.         1.         1.        ]
 [0.83333333 0.42708333 0.         ... 1.         1.         1.        ]
 ...
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]
 [1.         1.         1.         ... 1.         1.         1.        ]]
Optimal Rule Assignment: 
[ 0  1  2  3  4  5 19 41 20 33  8 27  7  6 34 12 24 43 18 29 30 21 22 23
 49 25 26  9 28 13 42 31 32 15 48 35 36 37 38 39 40 17 10 11 44 45 46 47
 14 16 50]
Sum of distances for optimal rule assignment: 
39.44427083333333
Distance between event descriptions: 
0.7734170751633985
Event Description Similarity: 
0.22658292483660147
