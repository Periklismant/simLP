Illegal character '>'
Syntax error at token NUMBER
Illegal character '>'
Syntax error at token VAR
Illegal character '≤'
Syntax error at token VAR
Illegal character '>'
Illegal character '<'
Illegal character '>'
Syntax error at token LPAREN
Illegal character '<'
Illegal character ';'
Illegal character '>'
Syntax error at token COMMA
Illegal character '<'
Syntax error at token INTERSECTALL
Syntax error at token INTERSECTALL
Syntax error at token COMMA
Syntax error at token COMMA
Syntax error at token DOT
Syntax error at token INTERSECTALL
Syntax error at token INTERSECTALL
Syntax error at token UNIONALL
Illegal character '>'
Syntax error at token NUMBER
Illegal character '>'
Syntax error at token VAR
Illegal character '≤'
Syntax error at token VAR
Illegal character '>'
Illegal character '<'
Illegal character '>'
Syntax error at token LPAREN
Illegal character '<'
Illegal character ';'
Illegal character '>'
Syntax error at token COMMA
Illegal character '<'
Syntax error at token INTERSECTALL
Syntax error at token INTERSECTALL
Syntax error at token COMMA
Syntax error at token COMMA
Syntax error at token DOT
Syntax error at token INTERSECTALL
Syntax error at token INTERSECTALL
Syntax error at token UNIONALL
Event Description 1: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).


Event Description 2: 
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).


Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.41666666666666663

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.0625
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.125
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.41666666666666663

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.    1.   ]
 [0.125 1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1.     1.    ]
 [0.125  0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[0.25 1.  ]
 [1.   1.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[0. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.6666666666666666

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.0625
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[0. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
0.5
Distance between rules: 
0.35416666666666663

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[0.25 0.  ]
 [1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[1.      1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.515625
Distance between rules: 
0.6770833333333333

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0.125
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [1.   1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.4583333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_start(Vessel),T)]
1
1
Body atom distances: 
[[0.25]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.25
Distance between rules: 
0.1875

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
1
Body atom distances: 
[[0.25 1.  ]
 [0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.625
Distance between rules: 
0.75

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0
[happensAt(gap_end(Vessel),T)]
[happensAt(gap_end(Vessel),T)]
1
1
Body atom distances: 
[[0.]]
Optimal Body Condition Assignment: 
[0]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0.125
[happensAt(gap_end(Vessel),T), _]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
1
Body atom distances: 
[[1. 1.]
 [0. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
1
Body atom distances: 
[[0.25 1.   1.   1.   1.   1.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]
 [0.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(gap_end(Vessel),T), _, _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
1
Body atom distances: 
[[1. 1. 1.]
 [0. 0. 0.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[1. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[1.    0.125]
 [1.    1.   ]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.125
Distance between rule bodies: 
0.5625
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[1.      1.     ]
 [1.      0.03125]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.03125
Distance between rule bodies: 
0.515625
Distance between rules: 
0.6770833333333333

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[1. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[0. 1.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[0.0625 0.125 ]
 [1.     1.    ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.35416666666666663

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType)]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
0.0625
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), _]
2
1
Body atom distances: 
[[1. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T)]
2
2
Body atom distances: 
[[1.     0.125 ]
 [1.     0.0625]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.6875

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T))]
2
2
Body atom distances: 
[[1. 1.]
 [1. 1.]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
0.125
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[happensAt(gap_end(Vessel),T), _]
2
1
Body atom distances: 
[[1. 0.]
 [1. 0.]]
Optimal Body Condition Assignment: 
[1 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
0.7083333333333333

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
0
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T))]
2
2
Body atom distances: 
[[0.0625 1.    ]
 [0.125  1.    ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
1.0625
Distance between rule bodies: 
0.53125
Distance between rules: 
0.35416666666666663

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
0
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T)]
2
2
Body atom distances: 
[[0.    0.125]
 [0.125 0.   ]]
Optimal Body Condition Assignment: 
[0 1]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
2
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
2
Body atom distances: 
[[1. 1. 1.]
 [1. 1. 1.]
 [0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
0.0625
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7589285714285714

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(gap_start(Vessel),T), _, _, _, _, _]
6
1
Body atom distances: 
[[0.25 0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 5 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
0.125
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _, _, _, _]
6
2
Body atom distances: 
[[0.25 1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]
 [1.   1.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 3 4 5 2 1]
Sum of distances for optimal body condition assignment: 
1.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.7678571428571428

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(gap_end(Vessel),T), _, _, _, _, _]
6
1
Body atom distances: 
[[0.25 0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]
 [1.   0.   0.   0.   0.   0.  ]]
Optimal Body Condition Assignment: 
[0 2 3 4 5 1]
Sum of distances for optimal body condition assignment: 
0.25
Distance between rule bodies: 
0.875
Distance between rules: 
0.8928571428571428

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _, _, _, _]
6
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _, _, _, _]
6
2
Body atom distances: 
[[1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]
 [1. 1. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[2 3 4 5 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
0
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
6
Body atom distances: 
[[0.   1.   1.   1.   1.   1.  ]
 [1.   0.   1.   1.   1.   1.  ]
 [1.   1.   0.   0.25 1.   0.5 ]
 [1.   1.   0.25 0.   1.   0.5 ]
 [1.   1.   1.   1.   0.   1.  ]
 [1.   1.   0.5  0.5  1.   0.  ]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0

Comparing rules:
 initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
1
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _]
6
3
Body atom distances: 
[[1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]
 [1. 1. 1. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[3 4 5 2 0 1]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
initiatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(entersArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[happensAt(entersArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(leavesArea(Vessel,AreaID),T),
	areaType(AreaID,AreaType).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[happensAt(leavesArea(Vessel,AreaID),T), areaType(AreaID,AreaType), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
terminatedAt(=(withinArea(Vessel,AreaType),true),T) :- 
	happensAt(gap_start(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[happensAt(gap_start(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
initiatedAt(=(gap(Vessel),nearPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	holdsAt(=(withinArea(Vessel,nearPorts),true),T).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[happensAt(gap_start(Vessel),T), holdsAt(=(withinArea(Vessel,nearPorts),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
initiatedAt(=(gap(Vessel),farFromPorts),T) :- 
	happensAt(gap_start(Vessel),T),
	-(holdsAt(=(withinArea(Vessel,nearPorts),true),T)).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[happensAt(gap_start(Vessel),T), -(holdsAt(=(withinArea(Vessel,nearPorts),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
terminatedAt(=(gap(Vessel),_Value),T) :- 
	happensAt(gap_end(Vessel),T).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[happensAt(gap_end(Vessel),T), _, _]
3
1
Body atom distances: 
[[1. 0. 0.]
 [1. 0. 0.]
 [1. 0. 0.]]
Optimal Body Condition Assignment: 
[1 2 0]
Sum of distances for optimal body condition assignment: 
1.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),normal),T),
	-(holdsAt(=(nearCoast(Vessel),true),T)).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[holdsAt(=(movingSpeed(Vessel),normal),T), -(holdsAt(=(nearCoast(Vessel),true),T)), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
terminatedAt(=(highSpeedNearCoast(Vessel),true),T) :- 
	holdsAt(=(movingSpeed(Vessel),below),T),
	holdsAt(=(nearCoast(Vessel),true),T).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[holdsAt(=(movingSpeed(Vessel),below),T), holdsAt(=(nearCoast(Vessel),true),T), _]
3
2
Body atom distances: 
[[1. 1. 0.]
 [1. 1. 0.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[2 1 0]
Sum of distances for optimal body condition assignment: 
2.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
initiatedAt(=(trawling(Vessel),true),T) :- 
	happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T),
	trawlingSpeed(Vessel,MinSpeed,MaxSpeed),
	=(Speed,MinSpeed),
	=(Speed,MaxSpeed),
	headingDistribution(Vessel,HeadingDist),
	=(HeadingDist,trawlingAngle(Vessel)).

Distance between rule heads: 
1
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I), _, _, _]
[happensAt(velocity(Vessel,Speed,CoG,TrueHeading),T), trawlingSpeed(Vessel,MinSpeed,MaxSpeed), =(Speed,MinSpeed), =(Speed,MaxSpeed), headingDistribution(Vessel,HeadingDist), =(HeadingDist,trawlingAngle(Vessel))]
6
3
Body atom distances: 
[[1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1. 1.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0. 0.]]
Optimal Body Condition Assignment: 
[0 1 2 3 4 5]
Sum of distances for optimal body condition assignment: 
3.0
Distance between rule bodies: 
1.0
Distance between rules: 
1.0

Comparing rules:
 holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).
 and
holdsFor(=(loitering(Vessel),true),I) :- 
	holdsFor(=(withinArea(Vessel,Area),true),Iwa),
	threshold(vloiter,Vloiter),
	intDurGreater(Iwa,Vloiter,I).

Distance between rule heads: 
0
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
[holdsFor(=(withinArea(Vessel,Area),true),Iwa), threshold(vloiter,Vloiter), intDurGreater(Iwa,Vloiter,I)]
3
3
Body atom distances: 
[[0. 1. 1.]
 [1. 0. 1.]
 [1. 1. 0.]]
Optimal Body Condition Assignment: 
[0 1 2]
Sum of distances for optimal body condition assignment: 
0.0
Distance between rule bodies: 
0.0
Distance between rules: 
0.0
Rule distances: 
[[0.         0.41666667 0.75       0.45833333 0.45833333 0.75
  1.         1.         0.75892857 1.        ]
 [0.41666667 0.         0.41666667 0.75       0.75       0.45833333
  0.6875     0.6875     0.89285714 1.        ]
 [0.75       0.41666667 0.         0.66666667 0.66666667 0.1875
  0.6875     0.6875     0.89285714 1.        ]
 [0.45833333 0.75       0.66666667 0.         0.35416667 0.75
  0.70833333 0.6875     0.76785714 1.        ]
 [0.45833333 0.75       0.66666667 0.35416667 0.         0.75
  0.67708333 1.         0.76785714 1.        ]
 [0.75       0.45833333 0.1875     0.75       0.75       0.
  0.70833333 0.70833333 0.89285714 1.        ]
 [1.         0.6875     0.6875     0.70833333 0.67708333 0.70833333
  0.         0.35416667 1.         1.        ]
 [1.         0.6875     0.6875     0.6875     1.         0.70833333
  0.35416667 0.         1.         1.        ]
 [0.75892857 0.89285714 0.89285714 0.76785714 0.76785714 0.89285714
  1.         1.         0.         1.        ]
 [1.         1.         1.         1.         1.         1.
  1.         1.         1.         0.        ]]
Optimal Rule Assignment: 
[0 1 2 3 4 5 6 7 8 9]
Sum of distances for optimal rule assignment: 
0.0
Distance between event descriptions: 
0.0
Event Description Similarity: 
1.0
